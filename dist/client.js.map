{"version":3,"file":"client.js","sources":["../src/view/component.ts","../src/view/dom.ts","../src/view/join-screen/join-screen.ts","../src/render/renderer.ts","../src/utils/vector2d/vector2d.ts","../src/utils/vector2d/immutable-vector2d.ts","../src/utils/vector3d/mutable-vector3d.ts","../src/utils/vector3d/handleable-vector3d.ts","../src/utils/vector3d/vector3d.ts","../src/utils/vector3d/immutable-vector3d.ts","../src/world/chunk-data/chunk-data-allocator.ts","../src/world/chunk-data/chunk-data-referencer.ts","../src/world/chunk.ts","../src/world/world.ts","../src/client/client.ts","../src/client/main.ts"],"sourcesContent":["export abstract class Component {\n    parent: Component;\n    abstract _element: HTMLElement;\n\n    constructor() {\n        this.parent = null;\n    }\n\n    bind(child) {\n        child.parent = this;\n    }\n\n    get element() {\n        if (this._element) return this._element;\n\n        this._element = this.render();\n\n        return this._element;\n    }\n\n    abstract render(): HTMLElement;\n}","export namespace DOM {\n    export function element(tag: string, ...classes: string[]): HTMLElement {\n        let element = document.createElement(tag);\n        element.classList.add(...classes);\n\n        return element;\n    }\n\n    export function text(data: string): Text {\n        return document.createTextNode(data);\n    }\n}","import { Component } from \"../component.js\";\nimport { DOM } from \"../dom.js\";\n\nexport class JoinScreen extends Component {\n    _element: HTMLDivElement;\n    _nickname: string = null;\n    _listeners: (() => void)[] = [];\n\n    render() {\n        const joinScreen = DOM.element('div', 'cubecraft-join-screen', 'cubecraft-screen');\n\n        joinScreen.appendChild(DOM.element('div', 'cubecraft-flex-3'));\n\n        const joinScreenTitle = DOM.element('img', 'cubecraft-join-screen-title') as HTMLImageElement;\n        joinScreenTitle.src = '../assets/textures/joinscreen/title.png';\n\n        joinScreen.appendChild(joinScreenTitle);\n\n        joinScreen.appendChild(DOM.element('div', 'cubecraft-flex-1'));\n\n        const optionsWrapper = DOM.element('div', 'cubecraft-join-options-wrapper');\n\n        const joinOptions = DOM.element('div', 'cubecraft-join-options');\n\n        const nameInput = DOM.element('input', 'cubecraft-textbox-thick', 'cubecraft-join-options-textbox') as HTMLInputElement;\n        nameInput.placeholder = `Enter a nickname`;\n\n        joinOptions.appendChild(nameInput);\n\n        const joinScreenButton = DOM.element('div', 'cubecraft-button-thick', 'cubecraft-join-options-button');\n        joinScreenButton.textContent = 'Join';\n\n        joinOptions.appendChild(joinScreenButton);\n        optionsWrapper.appendChild(joinOptions);\n        joinScreen.appendChild(optionsWrapper);\n\n        joinScreen.appendChild(DOM.element('div', 'cubecraft-flex-3'));\n\n        const resolve = () => {\n            this._nickname = nameInput.value;\n\n            for (const listener of this._listeners) {\n                listener();\n            }\n        };\n\n        joinScreenButton.addEventListener('click', () => {\n            resolve();\n        });\n\n        nameInput.addEventListener('keydown', event => {\n            if (event.key === 'Enter') {\n                resolve();\n            }\n        });\n\n        return joinScreen;\n    }\n\n    whenJoined() {\n        return new Promise((resolve, reject) => {\n            if (this._nickname) {\n                resolve(this._nickname);\n            } else {\n                this._listeners.push(() => {\n                    resolve(this._nickname);\n                });\n            }\n        });\n    }\n}","import { World } from \"../world/world.js\";\nimport { Perspective } from \"./perspective.js\";\n\nexport class Renderer {\n    perspective: Perspective;\n\n    constructor(public world: World, public canvas: HTMLCanvasElement) {\n    }\n}","import { Vector3D } from \"../vector3d/vector3d.js\";\n\nexport abstract class Vector2D {\n    x: number;\n    y: number;\n\n    constructor(x = 0, y = 0) {\n        if (typeof x !== 'number') throw new TypeError('x must be a number');\n        if (typeof y !== 'number') throw new TypeError('y must be a number');\n        if (isNaN(x)) throw new TypeError('x must not be NaN');\n        if (isNaN(y)) throw new TypeError('y must not be NaN');\n\n        this.x = x;\n        this.y = y;\n    }\n\n    abstract _set(x: number, y: number): Vector2D;\n\n    add(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x + x, this.y + y);\n            } else {\n                return this._set(this.x + x, this.y + x);\n            }\n        } else {\n            return this._set(this.x + x.x, this.y + x.y);\n        }\n    }\n\n    subtract(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x - x, this.y - y);\n            } else {\n                return this._set(this.x - x, this.y - x);\n            }\n        } else {\n            return this._set(this.x - x.x, this.y - x.y);\n        }\n    }\n\n    reverseSubtract(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(x - this.x, y - this.y);\n            } else {\n                return this._set(x - this.x, x - this.y);\n            }\n        } else {\n            return this._set(x.x - this.x, x.y - this.y);\n        }\n    }\n\n    complexMultiply(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x * x - this.y * y, this.x * y + this.y * x);\n            } else {\n                return this._set(this.x * x, this.y * x);\n            }\n        } else {\n            return this._set(this.x * x.x - this.y * x.y, this.x * x.y + this.y * x.x);\n        }\n    }\n\n    scalarMultiply(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x * x, this.y * y);\n            } else {\n                return this._set(this.x * x, this.y * x);\n            }\n        } else {\n            return this._set(this.x * x.x, this.y * x.y);\n        }\n    }\n\n    scalarDivide(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x / x, this.y / y);\n            } else {\n                return this._set(this.x / x, this.y / x);\n            }\n        } else {\n            return this._set(this.x / x.x, this.y / x.y);\n        }\n    }\n\n    reverseScalarDivide(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(x / this.x, y / this.y);\n            } else {\n                return this._set(x / this.x, x / this.y);\n            }\n        } else {\n            return this._set(x.x / this.x, x.y / this.y);\n        }\n    }\n\n    dot(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this.x * x + this.y * y;\n            } else {\n                return this.x * x + this.y * x;\n            }\n        } else {\n            return this.x * x.x + this.y * x.y;\n        }\n    }\n\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    lengthSquared() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    distanceTo(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return Math.sqrt(this.distanceSquaredTo(x, y));\n            } else {\n                return Math.sqrt(this.distanceSquaredTo(x, x));\n            }\n        } else {\n            return Math.sqrt(this.distanceSquaredTo(x.x, x.y));\n        }\n    }\n\n    distanceSquaredTo(x: number | Vector2D, y?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return (this.x - x) * (this.x - x) + (this.y - y) * (this.y - y);\n            } else {\n                return (this.x - x) * (this.x - x) + (this.y - x) * (this.y - x);\n            }\n        } else {\n            return (this.x - x.x) * (this.x - x.x) + (this.y - x.y) * (this.y - x.y);\n        }\n    }\n\n    normalize() {\n        return this.scalarDivide(this.length());\n    }\n\n    * [Symbol.iterator]() {\n        yield this.x;\n        yield this.y;\n    }\n\n    toString() {\n        return `${this.constructor.name} { ${this.x}, ${this.y} }`;\n    }\n\n    clone() {\n        return new (this.constructor as (new (x: number, y: number) => typeof this))(this.x, this.y);\n    }\n\n    static *_from(vector: Vector3D, format: string) {\n        yield format[0] == 'x' ? vector.x : format[0] == 'y' ? vector.y : format[0] == 'z' ? vector.z : format[0] == '1' ? 1 : 0;\n        yield format[1] == 'x' ? vector.x : format[1] == 'y' ? vector.y : format[1] == 'z' ? vector.z : format[1] == '1' ? 1 : 0;\n    }\n}","import { Vector3D } from \"../vector3d/vector3d.js\";\nimport { Vector2D } from \"./vector2d.js\";\n\nexport class ImmutableVector2D extends Vector2D {\n    constructor(x: number = 0, y: number = 0) {\n        super(x, y);\n    }\n\n    _set(x: number, y: number): ImmutableVector2D {\n        return new ImmutableVector2D(x, y);\n    }\n\n    private set(x: number | Vector2D, y?: number) {\n        throw new Error(\"Cannot set immutable vector\");\n    }\n\n    static from(vector: Vector3D, format: string) {\n        return new ImmutableVector2D(...Vector2D._from(vector, format));\n    }\n}","import { Vector2D } from \"../vector2d/vector2d.js\";\nimport { Vector3D } from \"./vector3d.js\";\n\nexport class MutableVector3D extends Vector3D {\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        super(x, y, z);\n    }\n\n    _set(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    static from(vector: Vector2D, format: string) {\n        return new MutableVector3D(...Vector3D._from(vector, format));\n    }\n}","import { Vector2D } from \"../vector2d/vector2d.js\";\nimport { MutableVector3D } from \"./mutable-vector3d.js\";\nimport { Vector3D } from \"./vector3d.js\";\n\nexport class HandleableVector3D extends MutableVector3D {\n    _listeners: Set<() => unknown>;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        super(x, y, z);\n\n        this._listeners = new Set();\n    }\n\n    on(type: 'change', handler: () => unknown) {\n        if (type == 'change') {\n            this._listeners.add(handler);\n        } else {\n            throw new Error('Unknown event type');\n        }\n    }\n\n    cause(type: 'change') {\n        if (type == 'change') {\n            for (const listener of this._listeners) {\n                listener();\n            }\n        } else {\n            throw new Error('Unknown event type');\n        }\n    }\n\n    _set(x: number, y: number, z: number): this {\n        this.cause('change');\n\n        return super._set(x, y, z);\n    }\n\n    clone() {\n        throw new Error(\"Cannot clone handleable vector. Instead use immutable() or mutable() to output a non-handlable vector.\");\n    }\n\n    static from(vector: Vector2D, format: string) {\n        return new HandleableVector3D(...Vector3D._from(vector, format));\n    }\n}","import { Vector2D } from \"../vector2d/vector2d.js\";\nimport { HandleableVector3D } from \"./handleable-vector3d.js\";\nimport { ImmutableVector3D } from \"./immutable-vector3d.js\";\nimport { MutableVector3D } from \"./mutable-vector3d.js\";\n\nexport abstract class Vector3D {\n    x: number;\n    y: number;\n    z: number;\n\n    constructor(x = 0, y = 0, z = 0) {\n        if (typeof x !== 'number') throw new TypeError('x must be a number');\n        if (typeof y !== 'number') throw new TypeError('y must be a number');\n        if (typeof z !== 'number') throw new TypeError('z must be a number');\n        if (isNaN(x)) throw new TypeError('x must not be NaN');\n        if (isNaN(y)) throw new TypeError('y must not be NaN');\n        if (isNaN(z)) throw new TypeError('z must not be NaN');\n\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    abstract _set(x: number, y: number, z: number): Vector3D;\n\n    add(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x + x, this.y + y, this.z + z);\n            } else {\n                return this._set(this.x + x, this.y + x, this.z + x);\n            }\n        } else {\n            return this._set(this.x + x.x, this.y + x.y, this.z + x.z);\n        }\n    }\n\n    subtract(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x - x, this.y - y, this.z - z);\n            } else {\n                return this._set(this.x - x, this.y - x, this.z - x);\n            }\n        } else {\n            return this._set(this.x - x.x, this.y - x.y, this.z - x.z);\n        }\n    }\n\n    reverseSubtract(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(x - this.x, y - this.y, z - this.z);\n            } else {\n                return this._set(x - this.x, x - this.y, x - this.z);\n            }\n        } else {\n            return this._set(x.x - this.x, x.y - this.y, x.z - this.z);\n        }\n    }\n\n    complexMultiply(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x * x - this.y * y, this.x * y + this.y * x, this.z * z);\n            } else {\n                return this._set(this.x * x, this.y * x, this.z * x);\n            }\n        } else {\n            return this._set(this.x * x.x - this.y * x.y, this.x * x.y + this.y * x.x, this.z * x.z);\n        }\n    }\n\n    scalarMultiply(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x * x, this.y * y, this.z * z);\n            } else {\n                return this._set(this.x * x, this.y * x, this.z * x);\n            }\n        } else {\n            return this._set(this.x * x.x, this.y * x.y, this.z * x.z);\n        }\n    }\n\n    scalarDivide(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(this.x / x, this.y / y, this.z / z);\n            } else {\n                return this._set(this.x / x, this.y / x, this.z / x);\n            }\n        } else {\n            return this._set(this.x / x.x, this.y / x.y, this.z / x.z);\n        }\n    }\n\n    reverseScalarDivide(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this._set(x / this.x, y / this.y, this.z / z);\n            } else {\n                return this._set(x / this.x, x / this.y, this.z / z);\n            }\n        } else {\n            return this._set(x.x / this.x, x.y / this.y, this.z / z);\n        }\n    }\n\n    dot(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return this.x * x + this.y * y + this.z * z;\n            } else {\n                return this.x * x + this.y * x + this.z * x;\n            }\n        } else {\n            return this.x * x.x + this.y * x.y + this.z * x.z;\n        }\n    }\n\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    lengthSquared() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    distanceTo(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return Math.sqrt(this.distanceSquaredTo(x, y, z));\n            } else {\n                return Math.sqrt(this.distanceSquaredTo(x, x, x));\n            }\n        } else {\n            return Math.sqrt(this.distanceSquaredTo(x.x, x.y, x.z));\n        }\n    }\n\n    distanceSquaredTo(x: number | Vector3D, y?: number, z?: number) {\n        if (typeof x === 'number') {\n            if (typeof y === 'number') {\n                return (this.x - x) ** 2 + (this.y - y) ** 2 + (this.z - z) ** 2;\n            } else {\n                return (this.x - x) ** 2 + (this.y - x) ** 2 + (this.z - x) ** 2;\n            }\n        } else {\n            return (this.x - x.x) ** 2 + (this.y - x.y) ** 2 + (this.z - x.z) ** 2;\n        }\n    }\n\n    normalize() {\n        return this.scalarDivide(this.length());\n    }\n\n    * [Symbol.iterator]() {\n        yield this.x;\n        yield this.y;\n    }\n\n    toString() {\n        return `${this.constructor.name} { ${this.x}, ${this.y} }`;\n    }\n\n    immutable() {\n        return new ImmutableVector3D(this.x, this.y, this.z);\n    }\n\n    mutable() {\n        return new MutableVector3D(this.x, this.y, this.z);\n    }\n\n    clone() {\n        if (this instanceof MutableVector3D) return new MutableVector3D(this.x, this.y, this.z);\n        if (this instanceof ImmutableVector3D) return new ImmutableVector3D(this.x, this.y, this.z);\n        if (this instanceof HandleableVector3D) return new HandleableVector3D(this.x, this.y, this.z);\n        throw new Error(`Unknown vector type: ${this.constructor.name}`);\n    }\n\n    handle() {\n        return new HandleableVector3D(this.x, this.y, this.z);\n    }\n\n    static *_from(vector: Vector2D, format: string) {\n        yield format[0] == 'x' ? vector.x : format[0] == 'y' ? vector.y : format[0] == '1' ? 1 : 0;\n        yield format[1] == 'x' ? vector.x : format[1] == 'y' ? vector.y : format[1] == '1' ? 1 : 0;\n        yield format[2] == 'x' ? vector.x : format[2] == 'y' ? vector.y : format[2] == '1' ? 1 : 0;\n    }\n}","import { Vector2D } from \"../vector2d/vector2d.js\";\nimport { Vector3D } from \"./vector3d.js\";\n\nexport class ImmutableVector3D extends Vector3D {\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        super(x, y, z);\n    }\n\n    _set(x: number, y: number, z: number): ImmutableVector3D {\n        return new ImmutableVector3D(x, y, z);\n    }\n\n    private set(x: number | Vector3D, y?: number, z?: number) {\n        throw new Error(\"Cannot set immutable vector\");\n    }\n\n    static from(vector: Vector2D, format: string) {\n        return new ImmutableVector3D(...Vector3D._from(vector, format));\n    }\n}","import { ChunkDataFieldAllocation } from \"./chunk-data-field-allocation.js\";\nimport { ChunkDataField } from \"./chunk-data-field.js\";\n\n/**\n * The ChunkDataAllocator allows multiple fields to be\n * allocated before creating chunks.\n * \n * * Fields may be allocated using the `allocate()`\n * method, passing in `ChunkDataFieldAllocation`\n * objects.\n * * A map of `ChunkDataField` objects can be instantiated\n * using the `initialize()` method.\n */\nexport class ChunkDataAllocator {\n    fields: Map<string, ChunkDataFieldAllocation<any>> = new Map();\n\n    constructor() {\n    }\n\n    allocate(id: string, field: ChunkDataFieldAllocation<any>) {\n        if (this.fields.has(id)) {\n            throw new Error(`Field id '${id}' is already used`);\n        }\n\n        this.fields.set(id, field);\n    }\n\n    initialize(): Map<string, ChunkDataField<any>> {\n        const fields = new Map<string, ChunkDataField<any>>();\n\n        for (const [ id, field ] of this.fields) {\n            fields.set(id, field.instantiate());\n        }\n\n        return fields;\n    }\n}","import { MutableVector3D } from \"../../utils/vector3d/mutable-vector3d.js\";\nimport { Vector3D } from \"../../utils/vector3d/vector3d.js\";\n\n/**\n * A `ChunkDataReferencer` converts between indexes and\n * positions in chunk data for given chunk dimensions.\n * \n * * The `index()` method converts a position to an\n * index in chunk data.\n * * The `position()` method converts an index in chunk\n * data to a position, based on the underlying `x()`,\n * `y()`, and `z()` methods.\n * * The `dimensions` property is a 3D vector containing\n * the dimensions of the chunk.\n * * The `cells` property is the total number of cells\n * in a chunk, equal to `dimensions.x * dimensions.y *\n * dimensions.z`.\n */\nexport class ChunkDataReferencer {\n    /**\n     * The dimensions of the chunk as a 3D vector.\n     */\n    public dimensions: Vector3D;\n\n    /**\n     * Creates a new `ChunkDataReferencer` using the\n     * chunk dimensions passed in through the first\n     * argument.\n     */\n    constructor(dimensions: Vector3D) {\n        this.dimensions = dimensions;\n    }\n\n    /**\n     * Returns the total number of cells in a chunk.\n     */\n    get cells() {\n        return this.dimensions.x * this.dimensions.y * this.dimensions.z;\n    }\n\n    /**\n     * Computes the chunk data index for a given\n     * position, where any block position will have a\n     * different index from 0 to the total number of\n     * cells in a chunk minus 1.\n     * \n     * The method is the opposite of `position()`.\n     */\n    index(x: number, y: number, z: number): number;\n    index(x: Vector3D): number;\n    index(x: number | Vector3D, y?: number, z?: number): number {\n        if (x instanceof Vector3D) {\n            y = x.y;\n            z = x.z;\n            x = x.x;\n        } else {\n            if (y === undefined || z === undefined) throw new Error(`Invalid arguments`);\n        }\n\n        if (x < 0 || x >= this.dimensions.x || y < 0 || y >= this.dimensions.y || z < 0 || z >= this.dimensions.z) throw new Error(`Coordinates are out of bounds`);\n\n        return x + y * this.dimensions.x + z * this.dimensions.x * this.dimensions.y;\n    }\n\n    /**\n     * Computes the x position of a specified chunk\n     * data index. This can be used with the `y()` and\n     * `z()` methods to get the complete position\n     * without creating a vector.\n     */\n    x(index: number): number {\n        return index % this.dimensions.x;\n    }\n\n    /**\n     * Computes the y position of a specified chunk\n     * data index. This can be used with the `x()`\n     * and `z()` methods to get the complete position\n     * without creating a vector.\n     */\n    y(index: number): number {\n        return Math.floor(index / this.dimensions.x) % this.dimensions.y;\n    }\n\n    /**\n     * Computes the z position of a specified chunk\n     * data index. This can be used with the `x()` and\n     * `y()` methods to get the complete position\n     * without creating a vector.\n     */\n    z(index: number): number {\n        return Math.floor(index / (this.dimensions.x * this.dimensions.y));\n    }\n\n    /**\n     * Computes the position of a specified chunk data\n     * index. Equivalent to calling `x()`, `y()`, and\n     * `z()`, then assembling a `Vector3D` from the\n     * components.\n     * \n     * The method is the opposite of `index()`.\n     */\n    position(index: number): Vector3D {\n        return new MutableVector3D(this.x(index), this.y(index), this.z(index));\n    }\n}","import { ImmutableVector2D } from \"../utils/vector2d/immutable-vector2d.js\";\nimport { ChunkDataField } from \"./chunk-data/chunk-data-field.js\";\nimport { ChunkData } from \"./chunk-data/chunk-data.js\";\nimport { Entity } from \"./entity.js\";\nimport { World } from \"./world.js\";\n\nexport class Chunk {\n    _world: World | null;\n    position: ImmutableVector2D;\n    _entities: Set<Entity>;\n    chunkData: ChunkData;\n\n    constructor() {\n        this._world = null;\n        this.position = new ImmutableVector2D();\n\n        this._entities = new Set();\n    }\n\n    get world(): World {\n        if (!this._world) throw new Error(`Chunk is not in a world`);\n\n        return this._world;\n    }\n\n    set world(world: World) {\n        this._world = world;\n    }\n\n    _unload() {\n        for (const entity of this._entities) {\n            this.world.entityIdMapping.delete(entity.id);\n        }\n    }\n\n    _setup() {\n        this.chunkData.fields ||= this.world.allocator.initialize();\n    }\n\n    tick() {\n    }\n\n    field(name: string): ChunkDataField<any> {\n        return this.chunkData.field(name);\n    }\n}","import { ImmutableVector2D } from \"../utils/vector2d/immutable-vector2d.js\";\nimport { Vector2D } from \"../utils/vector2d/vector2d.js\";\nimport { ImmutableVector3D } from \"../utils/vector3d/immutable-vector3d.js\";\nimport { ChunkDataAllocator } from \"./chunk-data/chunk-data-allocator.js\";\nimport { ChunkDataReferencer } from \"./chunk-data/chunk-data-referencer.js\";\nimport { Chunk } from \"./chunk.js\";\nimport { Entity } from \"./entity.js\";\n\nexport class World {\n    referencer: ChunkDataReferencer;\n    entityIdMapping: Map<string, Entity>;\n    chunks: Map<string, Chunk>;\n\n    constructor(\n        public allocator: ChunkDataAllocator = new ChunkDataAllocator(),\n        public chunkSize: ImmutableVector3D = new ImmutableVector3D(16, 64, 16)\n    ) {\n        this.entityIdMapping = new Map();\n        this.chunks = new Map();\n        this.referencer = new ChunkDataReferencer(chunkSize);\n    }\n\n    createChunk(x: number | Vector2D, z?: number) {\n        if (x instanceof Vector2D) {\n            z = x.y;\n            x = x.x;\n        }\n\n        const chunk = new Chunk();\n\n        chunk.world = this;\n        chunk.position = new ImmutableVector2D(x, z);\n\n        chunk._setup();\n\n        return chunk;\n    }\n\n    getChunk(x: number | Vector2D, z?: number) {\n        if (x instanceof Vector2D) {\n            z = x.y;\n            x = x.x;\n        }\n        \n        return this.chunks.get(x + '.' + z) || null;\n    }\n\n    addEntity(entity: Entity) {\n        this.entityIdMapping.set(entity.id, entity);\n\n        const chunk = this.getChunk(\n            Math.floor(entity.position.x / this.chunkSize.x),\n            Math.floor(entity.position.z / this.chunkSize.z)\n        );\n\n        if (!chunk) {\n            throw new Error(\"Cannot add entity to world: Chunk does not exist\");\n        }\n\n        chunk._entities.add(entity);\n\n        entity._joinWorld(this);\n        entity._updateCurrentChunk(chunk);\n\n        return entity;\n    }\n\n    removeEntity(entity: Entity) {\n        entity._leaveWorld();\n\n        this.entityIdMapping.delete(entity.id);\n    }\n\n    _validateDisconnectedEntities() {\n        for (const entity of this.entityIdMapping.values()) {\n            if (!entity.chunk) {\n                console.warn(\"Entity is not in a chunk\\n\", entity);\n            }\n        }\n    }\n\n    tick() {\n        for (const entity of this.entityIdMapping.values()) {\n            entity.tick();\n        }\n\n        for (const [ _id, chunk ] of this.chunks) {\n            chunk.tick();\n        }\n\n        this._validateDisconnectedEntities();\n    }\n}","import { Renderer } from \"../render/renderer.js\";\nimport { Component } from \"../view/component.js\";\nimport { DOM } from \"../view/dom.js\";\nimport { World } from \"../world/world.js\";\n\nexport class Client extends Component {\n    _element: HTMLDivElement;\n    renderer: Renderer;\n    world: World;\n\n    constructor() {\n        super();\n\n        this.world = new World();\n        (this.element);\n    }\n\n    init() {\n        \n    }\n\n    render() {\n        const client = DOM.element('div', 'cubecraft-client', 'cubecraft-layers', 'cubecraft-screen');\n\n        const canvas = DOM.element('canvas', 'cubecraft-client-canvas') as HTMLCanvasElement;\n\n        this.renderer = new Renderer(this.world, canvas);\n\n        client.appendChild(canvas);\n\n        return client;\n    }\n}","import { JoinScreen } from \"../view/join-screen/join-screen.js\";\nimport { Client } from \"./client.js\";\n\nconst joinScreen = new JoinScreen();\n\ndocument.body.appendChild(joinScreen.element);\n\nconst nickname = await joinScreen.whenJoined();\n\ndocument.body.removeChild(joinScreen.element);\n\nconst client = new Client();\n\ndocument.body.appendChild(client.element);\n\nclient.init();\nclient.join(nickname);"],"names":[],"mappings":"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"}